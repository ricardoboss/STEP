name: Publish

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
    paths:
      - ".github/workflows/publish.yml"
      - "StepLang.CLI/publish.sh"
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/publish.yml"
      - "StepLang.CLI/publish.sh"

jobs:
  build:
    name: Build Binaries

    strategy:
      fail-fast: false
      matrix:
        os: [ linux, win, osx ]
        arch: [ x64, arm64 ]
        dotnet: [ "9.0" ]
        exclude:
          - os: linux
            arch: arm64
          - os: win
            arch: arm64

    runs-on: ${{ (matrix.os == 'win' && 'windows-latest') || (matrix.os == 'osx' && 'macos-latest') || 'ubuntu-latest' }}

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore Dependencies
        run: dotnet restore --nologo --force-evaluate --runtime ${{ matrix.os }}-${{ matrix.arch }}

      - name: Build
        run: dotnet publish StepLang.CLI/StepLang.CLI.csproj --configuration Release --no-restore --runtime ${{ matrix.os }}-${{ matrix.arch }} --framework net${{ matrix.dotnet }} --self-contained true /p:PublishTrimmed=true /p:PublishSingleFile=true

      - name: Prepare Artifact (unix)
        if: matrix.os != 'win'
        env:
          frameworkVersion: net${{ matrix.dotnet }}
          platform: ${{ matrix.os }}-${{ matrix.arch }}
        run: |
          mkdir -p publish

          sourceFilename="step"
          targetFilename="step-$platform"

          outputPath="publish/$targetFilename"

          # move built binary to publish folder
          mv "StepLang.CLI/bin/Release/$frameworkVersion/$platform/publish/$sourceFilename" "$outputPath"

          chmod +x "$outputPath"

          echo "Created $outputPath"

      - name: Prepare Artifact (windows)
        if: matrix.os == 'win'
        env:
          frameworkVersion: net${{ matrix.dotnet }}
          platform: ${{ matrix.os }}-${{ matrix.arch }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $sourceFilename = "step.exe"
          $targetFilename = "step-$env:platform.exe"
          $outputPath = "publish\$targetFilename"

          New-Item -ItemType Directory -Path "publish" -Force | Out-Null

          $inputPath = "StepLang.CLI\bin\Release\$env:frameworkVersion\$env:platform\publish\$sourceFilename"

          Move-Item -Path $inputPath -Destination $outputPath -Force

          Write-Host "Created $outputPath"

      - name: Upload Artifact (step-${{ matrix.os }}-${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: step-${{ matrix.os }}-${{ matrix.arch }}
          path: publish/step-${{ matrix.os }}-${{ matrix.arch }}*

  sign-macos:
    name: Sign macOS binary

    # only sign on main branch or when tagged
    if: false && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))

    needs:
      - build

    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: step-osx-arm64
          path: ./artifact

      - name: Install certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: temp-password
        run: |
          CERT_PATH=$RUNNER_TEMP/cert.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/signing.keychain-db

          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > "$CERT_PATH"

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security import "$CERT_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

          echo "Available identities:"
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

      - name: Code Sign Binary
        env:
          APPLE_SIGNING_ID: ${{ secrets.APPLE_SIGNING_ID }}
        run: codesign --force --timestamp --options=runtime --entitlements StepLang.CLI/entitlements.plist --sign "$APPLE_SIGNING_ID" ./artifact/step-osx-arm64

      - name: Notarize Binary
        uses: lando/notarize-action@v2
        with:
          product-path: ./artifact/step-osx-arm64
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}
          appstore-connect-team-id: ${{ secrets.NOTARIZATION_TEAM_ID }}
          primary-bundle-id: de.ricardoboss.step
          verbose: true

      - name: Verify notarization
        run: codesign -vvvv -R="notarized" --check-notarization ./artifact/step-osx-arm64

      - name: Upload Artifacts (step-osx-arm64-signed)
        uses: actions/upload-artifact@v4
        with:
          name: step-osx-arm64-signed
          path: ./artifact/step-osx-arm64

  test-binaries:
    name: Test Binaries

    needs:
      - build

    strategy:
      fail-fast: false
      matrix:
        os: [ linux, win, osx ]
        arch: [ x64, arm64 ]
        exclude:
          - os: linux
            arch: arm64
          - os: win
            arch: arm64

    runs-on: ${{ (matrix.os == 'win' && 'windows-latest') || (matrix.os == 'osx' && 'macos-latest') || 'ubuntu-latest' }}

    steps:
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: step-${{ matrix.os }}-${{ matrix.arch }}
          path: ./artifact

      - name: Test (unix)
        shell: bash
        if: matrix.os != 'win'
        run: |
          chmod +x ./artifact/step-${{ matrix.os }}-${{ matrix.arch }}
          ./artifact/step-${{ matrix.os }}-${{ matrix.arch }} --info

      - name: Test (win)
        shell: pwsh
        if: matrix.os == 'win'
        run: |
          & ./artifact/step-${{ matrix.os }}-${{ matrix.arch }}.exe --info

  release:
    name: Create GitHub Release

    if: startsWith(github.ref, 'refs/tags/')

    needs:
      - build
#      - sign-macos
      - test-binaries

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download binaries (step)
        uses: actions/download-artifact@v4
        with:
          name: step
          path: ./artifacts

      - name: Download binaries (step-linux-x64)
        uses: actions/download-artifact@v4
        with:
          name: step-linux-x64
          path: ./artifacts

      - name: Download binaries (step-linux-arm64)
        uses: actions/download-artifact@v4
        with:
          name: step-linux-arm64
          path: ./artifacts

      - name: Download binaries (step-win-x64)
        uses: actions/download-artifact@v4
        with:
          name: step-windows-x64
          path: ./artifacts

      - name: Download binaries (step-win-arm64)
        uses: actions/download-artifact@v4
        with:
          name: step-windows-arm64
          path: ./artifacts

      - name: Download binaries (step-osx-x64)
        uses: actions/download-artifact@v4
        with:
          name: step-osx-x64
          path: ./artifacts

      - name: Download binaries (step-osx-arm64-signed)
        uses: actions/download-artifact@v4
        with:
#          name: step-osx-arm64-signed
          name: step-osx-arm64
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            These release notes are generated automatically. For more information, please refer to the [CHANGELOG.md](https://github.com/ricardoboss/STEP/blob/main/CHANGELOG.md).
          generate_release_notes: true
          fail_on_unmatched_files: true
          draft: true
          files: |
            StepLang.CLI/publish/*
